import math

V = 11
eps = 1e-6


def f(x, y):
    return x ** 3 - x ** 2 * (3 + V) + 2 * V * x + y


def check_y(x):
    return x ** 2 * (V - x)


def euler(n, h, x0, y0):
    x = [0] * n
    x[0] = x0
    for i in range(n - 1):
        x[i + 1] = x[i] + h
    y = [0] * n
    y[0] = y0
    for i in range(n - 1):
        y[i + 1] = y[i] + h * f(x[i], y[i])
    return y


def ex_euler(n, h, x0, y0):
    x = [0] * (2 * n)
    x[0] = x0
    for i in range(2 * n - 1):
        x[i + 1] = x[i] + h / 2
    y = [0] * (2 * n)
    y[0] = y0
    for i in range(2 * n - 1):
        if i % 2:
            y[i + 1] = y[i - 1] + h * f(x[i], y[i])
        else:
            y[i + 1] = y[i] + h / 2 * f(x[i], y[i])
    res = [0] * n
    for i in range(n):
        res[i] = y[2 * i]
    return res


def print_results(vx, vy):
    print("x values:")
    print("\t".join(f"{x:.5f}" for x in vx))
    print("y values:")
    print("\t".join(f"{y:.5f}" for y in vy))
    print("check_y values:")
    print("\t".join(f"{check_y(x):.5f}" for x in vx))
    print("Difference (Error):")
    errors = [vy[i] - check_y(vx[i]) for i in range(len(vy))]
    print("\t".join(f"{error:.5f}" for error in errors))
    max_error = max(abs(error) for error in errors)
    print(f"Максимальное отклонение: {max_error:.5f}\n")


def solve():
    n = 13
    h = 0.1
    x0 = V
    y0 = 0
    vx = [x0 + i * h for i in range(n)]

    print("Метод Эйлера:")
    vy1 = euler(n, h, x0, y0)
    print_results(vx, vy1)

    print("Расширенный метод Эйлера:")
    vy2 = ex_euler(n, h, x0, y0)
    print_results(vx, vy2)


if __name__ == "__main__":
    solve()
